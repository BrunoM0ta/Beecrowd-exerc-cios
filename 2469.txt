#include <stdio.h>

void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int leftArr[n1], rightArr[n2];

    for (i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    i = 0,j= 0;
    k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        }
        else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {

        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}

int main() {
    int n;
    scanf("%d\n",&n);
    int arr[n],c;
    for(int i=0;i<n;i++) scanf("%d",&arr[i]);
    mergeSort(arr, 0, n - 1);
     int max=1,posicao=0;
     for(int i=0;i<n;i++){
    c=1;
    for(int j=i+1;j<n;j++){
      if(arr[i]==arr[j]){
         c++;
         for(int k=j;k<n-1;k++){
           arr[k]=arr[k+1];
         }
         j--; n--;
      }
    }  if(c>=max) max=c,posicao=i;
  }
  printf("%d\n",arr[posicao]);
    return 0;
}